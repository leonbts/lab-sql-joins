-- 1. Number of Films per category

SELECT c.name AS category, COUNT(fc.film_id) AS film_count
FROM film_category fc
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY film_count DESC;


-- 2. Retrieve store ID, city, and country for each store

SELECT s.store_id, ci.city, co.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country co ON ci.country_id = co.country_id;


-- 3. Calculate total revenue generated by each store

SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store s
JOIN inventory i ON s.store_id = i.store_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY s.store_id
ORDER BY total_revenue DESC;


-- 4. Average running time of films for each category

SELECT c.name AS category, ROUND(AVG(f.length), 2) AS avg_running_time
FROM film_category fc
JOIN category c ON fc.category_id = c.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY avg_running_time DESC;


-- 5. Film categories with the longest average running time

SELECT c.name AS category, ROUND(AVG(f.length), 2) AS avg_running_time
FROM film_category fc
JOIN category c ON fc.category_id = c.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY avg_running_time DESC
LIMIT 1;


-- 6. Top 10 most frequently rented movies (descending order)

SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 10;


-- 7. Check if "Academy Dinosaur" can be rented from Store 1

SELECT 
  f.title,
  CASE 
    WHEN COUNT(i.inventory_id) > 0 THEN 'Available'
    ELSE 'Not Available'
  END AS availability
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id AND i.store_id = 1
WHERE f.title = 'Academy Dinosaur'
GROUP BY f.title;


-- 8. List all distinct film titles with availability status ('Available' or 'NOT available')

SELECT 
  f.title,
  CASE 
    WHEN COUNT(i.inventory_id) > 0 THEN 'Available'
    ELSE 'NOT available'
  END AS availability_status
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
GROUP BY f.title
ORDER BY f.title;